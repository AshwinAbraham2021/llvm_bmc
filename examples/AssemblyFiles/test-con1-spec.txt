; This is a comment


;; Declare variable
;; list all the variables that are read
(declare-var @main__cyclecount i32); input
(declare-var @main__step1 i16); output
(declare-var @main__posx float32); input
(declare-var @main__posy float32); input
(declare-var @main__posz float32); input
(declare-var @main__combinederrorflag flag); output
(declare-var @main__stageflg flag); input
(declare-var @main__stageflgc  flag); input
(declare-var @minor_cycle__offstage3 flag)
(declare-var @major_cycle__position float32 array 5)  ;output

;; -----------------------------------------
;; Declare major thread
;; -----------------------------------------
;; Declare threads
(declare-thread major main__guid_major) ; param name entry_function
(invoke-parameters major repeated 1 priority 2)
;(invoke-behaviour major synchronous unique can-be-killed (repeated 0ms 500ms) (priority 5))
;; model when a thread can be killed.
(post-condition major (CallSequence main__stageflags major_cycle__stage3_major))
;(post-condition major (assert(=> (not(= (select @main__BRate #x0000000000000001) (fp #b0 #b00000000 #b00000000000000000000000))) (bvuge @main__stageflg #x0044))))
;(post-condition major (assert(=> (= @main__guidoutflag #x2222) (bvuge @main__stageflg #x0077))))
;

;; -----------------------------------------
;; Declare minor thread
;; -----------------------------------------
;
(declare-thread minor main__guid_minor)
(invoke-parameters minor repeated 25 priority 1)
;(invoke-behaviour minor synchronous unique can-be-killed (repeated 0ms 20ms) (priority 10))
(pre-condition minor (assert(= (bvadd @main__stageflg @main__stageflgc) #xffff)))
;
(post-condition minor (assert(= @main__combinederrorflag #x0000)))
;(post-condition minor (assert(=> (= @main__guidoutflag #x0022) (fp.gt @minor_cycle__velocitycoeff (fp #b0 #b10001011 #b01000111010000000000000)))))
;(post-condition minor (CallSequence main__stageflags minor_cycle__stage3_minor))
